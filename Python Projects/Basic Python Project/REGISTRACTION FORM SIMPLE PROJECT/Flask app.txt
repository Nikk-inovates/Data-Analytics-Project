from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import psycopg2
from psycopg2 import sql
import bcrypt  # For password hashing

app = Flask(__name__)
CORS(app)  # Allow cross-origin requests (important for frontend-backend communication)

# PostgreSQL Database Configuration
DB_CONFIG = {
    "dbname": "Registration_Info",  # Corrected database name
    "user": "postgres",     # Replace with your actual username
    "password": "9926",     # Replace with your actual password
    "host": "localhost",
    "port": "5432"          # Default PostgreSQL port
}

# Route to render the HTML form
@app.route("/")
def home():
    return render_template("index.html")

# Route to handle form submission
@app.route("/register", methods=["POST"])
def register():
    # Ensure that the request is in JSON format
    if not request.is_json:
        return jsonify({"error": "Request must be in JSON format"}), 400

    try:
        # Get data from frontend (JSON format)
        data = request.json
        first_name = data.get("firstName")
        last_name = data.get("lastName")
        gender = data.get("gender")
        email = data.get("email")
        password = data.get("password")
        phone = data.get("phone")

        # Check if all required fields are provided
        if not all([first_name, last_name, gender, email, password, phone]):
            return jsonify({"error": "All fields are required!"}), 400

        # Hash the password using bcrypt for security
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

        # Connect to PostgreSQL
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()

        # Insert into database
        insert_query = sql.SQL("""
            INSERT INTO Users_Info (first_name, last_name, gender, email, password, phone)
            VALUES (%s, %s, %s, %s, %s, %s)
        """)
        
        cur.execute(insert_query, (first_name, last_name, gender, email, hashed_password, phone))
        conn.commit()

        # Close cursor and connection
        cur.close()
        conn.close()

        return jsonify({"message": "Registration successful!"}), 201

    except psycopg2.Error as db_error:
        # Handle database connection errors
        return jsonify({"error": f"Database error: {db_error.pgcode} - {db_error.pgerror}"}), 500
    except Exception as e:
        # Catch any other exceptions
        return jsonify({"error": str(e)}), 500


# Run the Flask app
if __name__ == "__main__":
    app.run(debug=True)
